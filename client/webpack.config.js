//this file can be named anything, but then we have to specifiy
// the filename with --config option

// define entry point for the application
// define the output file path
// This is basically a node script


// behaves like webpack but also create a server which serves our files.
//webpack tutorial
//https://www.youtube.com/watch?v=8DDVr6wjJzQ

const path = require("path");

console.log(__dirname);
module.exports = {
  entry: "./app.js",
  output: {
    // __dirname is currentDir, path.join gives the absolute path
    path: path.join(__dirname, "public"),
    filename: "bundle.js"
  },
  //loader define what to do with a javascript file when it gets loaded.
  /*
  Webpack by itself only knows javascript, so when we want it to pack any other type of resources like .css or .scss or .ts,
  webpack needs help in order to compile and bundle those non-javascript types of resources.

  Loaders are the node-based utilities built for webpack to help webpack to compile and/or
  transform a given type of resource that can be bundled as a javascript module.

  css-loader is the npm module that would help webpack to collect CSS from all the css files
  referenced in your application and put it into a string.And then

  style-loader would take the output string generated by the above css-loader
  and put it inside the <style> tags in the index.html file.
  */
  //modules and loaders allows
  module: {
    rules: [
      {
        // limiting the babel-loader to js files only, revisit this if we face any errors
        test: /\.js$/,
        loader: "babel-loader",
        exclude: "/node_modules"
      },
      {
        test: /\.css$/,
        //webpack applies the loader in reverse order, css-loader gets applied first
        use: ["style-loader", "css-loader"]
      },
      {
        test: /\.(ttf|eot|woff|woff2)$/,
        use: {
          loader: "file-loader",
          options: {
            name: "fonts/[name].[ext]",
          },
        },
      }
    ],
  },
  mode: "development",
  devServer: {
    //defines where the dev-server should look for the content to serve
    contentBase: path.join(__dirname, "public")
  }
};
